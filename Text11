package com.itg;

public class Text11 {
	public static void main(String[] args) {
		//추상화 abstract , 현실에 없는것 , 미완성작
		/* 1.interface추상화 - 전혀 객체를 만들지 않는 모든 추상화
		   -interface추상화는 기능별 분리나 두 객체를 연결하기위해서 사용(객체의 분리를위해 사용)
		   2.abstract추상화(메소드의 추상화) - 상속관계에서 객체를 생성합니다.
		   -abstract추상화는 자식객체의 공통적인 필수적인 요소를 모아서 추상화
		   정삭적 메소드 : 리턴타입 메소드명(리턴타입){구현로직}
		   추상화된 메소드: 리턴타입 메소드명(리턴타입)
		*/
		AutoCar c1 = new Kia();
		AutoCar c2 = new HyunDai();
		AutoCar [] carr = {c1,c2};
		for (int i=0;i<carr.length;i++) {
			carr[i].introMe();
			carr[i].gogoExcel();
			carr[i].stopBreak();
			carr[i].handling("좌측");
		}
		
	}

}
//모든 자동차가 가져야 할 공통적이고 필수적인 메소드가 ? 브레이크 , 핸들 , 가속기능 
abstract class AutoCar {  // 추상 메소드를 갖고있으면 추상 클래스여야한다
	public abstract void stopBreak();
	public abstract void gogoExcel();
	public abstract void handling(String direction);
	public void introMe() {
		System.out.println("이름 모를 자동차");
	}
}

class Kia extends AutoCar { // 자식클래스가 부모를 추상화를 풀지않으면 지도 추상화 해야한다.
	String maker = "기아자동차";
	public void stopBreak() {
		System.out.println(maker+"가 브레이크를 조작하여 멈춥니다");
	}
	public void gogoExcel() {
		System.out.println(maker+"가 엑셀을 조작하여 속도를 냅니다");
	}
	public void handling(String direction) { //오버라이드는 상속관계에서 파라미터 받는값이 같아야한다.
		System.out.println(maker+"가"+direction+ "방향으로 핸들을 조작합니다");
	}
	public void introMe() {
		System.out.println(maker);
	}
}
class HyunDai extends AutoCar { // 자식클래스가 부모를 추상화를 풀지않으면 지도 추상화 해야한다.
	String maker = "현대자동차";
	public void stopBreak() {
		System.out.println(maker+"가 브레이크를 조작하여 멈춥니다");
	}
	public void gogoExcel() {
		System.out.println(maker+"가 엑셀을 조작하여 속도를 냅니다");
	}
	public void handling(String direction) { //오버라이드는 상속관계에서 파라미터 받는값이 같아야한다.
		System.out.println(maker+"가"+direction+ "방향으로 핸들을 조작합니다");
	}
	public void introMe() {
		System.out.println(maker);
	}
}
